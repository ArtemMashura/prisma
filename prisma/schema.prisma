// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  name          String
  age           Int
  email         String? @unique
  role          Role    @default(USER)
  writtenPosts  Post[]  @relation("WrittenPosts")
  favoritePosts Post[]
  money         Decimal @default(1000)

  UserSettings UserSettings?

  @@unique(name: "asf", fields: [age, name])
  @@index([email])
}

model UserSettings {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @unique
}

model Post {
  id            Int        @id @default(autoincrement())
  author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  title         String
  averageRating Float
  authorId      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  favoriteBy    User[]
  userId        String?
  categories    Category[]
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

enum Role {
  USER
  EDITOR
  ADMIN
}

model Transfer {
  id        String   @id @default(uuid())
  ammount   Decimal
  fromId    String
  toId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
